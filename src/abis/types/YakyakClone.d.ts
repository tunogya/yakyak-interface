/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface YakyakCloneInterface extends ethers.utils.Interface {
  functions: {
    "addDnaToSet(uint64,uint64)": FunctionFragment;
    "addDnasToSet(uint64,uint64[])": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "batchBurn(uint256[])": FunctionFragment;
    "batchCloning(uint64,uint64,uint256)": FunctionFragment;
    "batchTransfer(address,uint256[])": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "cloning(uint64,uint64)": FunctionFragment;
    "createDna(string)": FunctionFragment;
    "createSet(string)": FunctionFragment;
    "feeding(uint256,uint256)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getBaseURI()": FunctionFragment;
    "getDnaData(uint64)": FunctionFragment;
    "getDnaMintedInSet(uint64,uint64)": FunctionFragment;
    "getDnasInSet(uint64)": FunctionFragment;
    "getNftMetadata(uint256)": FunctionFragment;
    "getSetData(uint64)": FunctionFragment;
    "getState()": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "lockSet(uint64)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "retireAllFromSet(uint64)": FunctionFragment;
    "retireDnaFromSet(uint64,uint64)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "startNewSeries()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateBaseURI(string)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addDnaToSet",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addDnasToSet",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "batchBurn",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCloning",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "batchTransfer",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "cloning",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "createDna", values: [string]): string;
  encodeFunctionData(functionFragment: "createSet", values: [string]): string;
  encodeFunctionData(
    functionFragment: "feeding",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDnaData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDnaMintedInSet",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDnasInSet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNftMetadata",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSetData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getState", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockSet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retireAllFromSet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "retireDnaFromSet",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "startNewSeries",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBaseURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addDnaToSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addDnasToSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "batchBurn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchCloning",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cloning", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createDna", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createSet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeding", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBaseURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDnaData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDnaMintedInSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDnasInSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNftMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSetData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockSet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retireAllFromSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retireDnaFromSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startNewSeries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBaseURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "BaseURIUpdate(string)": EventFragment;
    "DnaAddedToSet(uint64,uint64)": EventFragment;
    "DnaCreated(uint64)": EventFragment;
    "DnaRetiredFromSet(uint64,uint64,uint256)": EventFragment;
    "NewSeriesStarted(uint64)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetCreated(uint64,uint64)": EventFragment;
    "SetLocked(uint64)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
    "YaklonDestroyed(uint256)": EventFragment;
    "YaklonFed(uint256,uint256)": EventFragment;
    "YaklonMinted(uint256,uint64,uint64,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BaseURIUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DnaAddedToSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DnaCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DnaRetiredFromSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewSeriesStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "YaklonDestroyed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "YaklonFed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "YaklonMinted"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    approved: string;
    tokenId: BigNumber;
  }
>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean] & {
    owner: string;
    operator: string;
    approved: boolean;
  }
>;

export type BaseURIUpdateEvent = TypedEvent<[string] & { newBaseURI: string }>;

export type DnaAddedToSetEvent = TypedEvent<
  [BigNumber, BigNumber] & { setID: BigNumber; dnaID: BigNumber }
>;

export type DnaCreatedEvent = TypedEvent<[BigNumber] & { id: BigNumber }>;

export type DnaRetiredFromSetEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    setID: BigNumber;
    dnaID: BigNumber;
    numNFTs: BigNumber;
  }
>;

export type NewSeriesStartedEvent = TypedEvent<
  [BigNumber] & { newSeriesID: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type SetCreatedEvent = TypedEvent<
  [BigNumber, BigNumber] & { setID: BigNumber; series: BigNumber }
>;

export type SetLockedEvent = TypedEvent<[BigNumber] & { setID: BigNumber }>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; tokenId: BigNumber }
>;

export type WithdrawEvent = TypedEvent<
  [string, BigNumber] & { account: string; amount: BigNumber }
>;

export type YaklonDestroyedEvent = TypedEvent<
  [BigNumber] & { tokenID: BigNumber }
>;

export type YaklonFedEvent = TypedEvent<
  [BigNumber, BigNumber] & { tokenID: BigNumber; amount: BigNumber }
>;

export type YaklonMintedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber] & {
    tokenID: BigNumber;
    dnaID: BigNumber;
    setID: BigNumber;
    serialID: BigNumber;
  }
>;

export class YakyakClone extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: YakyakCloneInterface;

  functions: {
    addDnaToSet(
      setID: BigNumberish,
      dnaID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addDnasToSet(
      setID: BigNumberish,
      dnaIDs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    batchBurn(
      tokenIDs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchCloning(
      setID: BigNumberish,
      dnaID: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchTransfer(
      to: string,
      tokenIDs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cloning(
      setID: BigNumberish,
      dnaID: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createDna(
      metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createSet(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeding(
      tokenID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getBaseURI(overrides?: CallOverrides): Promise<[string]>;

    getDnaData(
      dnaID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { metadata: string }>;

    getDnaMintedInSet(
      setID: BigNumberish,
      dnaID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDnasInSet(
      setID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getNftMetadata(
      tokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        serialID: BigNumber;
        feed: BigNumber;
        dnaID: BigNumber;
        setID: BigNumber;
      }
    >;

    getSetData(
      setID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean] & {
        name: string;
        series: BigNumber;
        locked: boolean;
      }
    >;

    getState(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        currentSeries: BigNumber;
        nextDnaID: BigNumber;
        nextSetID: BigNumber;
        nextCloneID: BigNumber;
      }
    >;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lockSet(
      setID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    retireAllFromSet(
      setID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    retireDnaFromSet(
      setID: BigNumberish,
      dnaID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startNewSeries(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateBaseURI(
      newBaseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addDnaToSet(
    setID: BigNumberish,
    dnaID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addDnasToSet(
    setID: BigNumberish,
    dnaIDs: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  batchBurn(
    tokenIDs: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchCloning(
    setID: BigNumberish,
    dnaID: BigNumberish,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchTransfer(
    to: string,
    tokenIDs: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burn(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cloning(
    setID: BigNumberish,
    dnaID: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createDna(
    metadata: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createSet(
    name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeding(
    tokenID: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getBaseURI(overrides?: CallOverrides): Promise<string>;

  getDnaData(dnaID: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getDnaMintedInSet(
    setID: BigNumberish,
    dnaID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDnasInSet(
    setID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getNftMetadata(
    tokenID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      serialID: BigNumber;
      feed: BigNumber;
      dnaID: BigNumber;
      setID: BigNumber;
    }
  >;

  getSetData(
    setID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, boolean] & {
      name: string;
      series: BigNumber;
      locked: boolean;
    }
  >;

  getState(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      currentSeries: BigNumber;
      nextDnaID: BigNumber;
      nextSetID: BigNumber;
      nextCloneID: BigNumber;
    }
  >;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lockSet(
    setID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  retireAllFromSet(
    setID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  retireDnaFromSet(
    setID: BigNumberish,
    dnaID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startNewSeries(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateBaseURI(
    newBaseURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addDnaToSet(
      setID: BigNumberish,
      dnaID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addDnasToSet(
      setID: BigNumberish,
      dnaIDs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    batchBurn(
      tokenIDs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchCloning(
      setID: BigNumberish,
      dnaID: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    batchTransfer(
      to: string,
      tokenIDs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    burn(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    cloning(
      setID: BigNumberish,
      dnaID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createDna(metadata: string, overrides?: CallOverrides): Promise<BigNumber>;

    createSet(name: string, overrides?: CallOverrides): Promise<BigNumber>;

    feeding(
      tokenID: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getBaseURI(overrides?: CallOverrides): Promise<string>;

    getDnaData(dnaID: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getDnaMintedInSet(
      setID: BigNumberish,
      dnaID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDnasInSet(
      setID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getNftMetadata(
      tokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        serialID: BigNumber;
        feed: BigNumber;
        dnaID: BigNumber;
        setID: BigNumber;
      }
    >;

    getSetData(
      setID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean] & {
        name: string;
        series: BigNumber;
        locked: boolean;
      }
    >;

    getState(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        currentSeries: BigNumber;
        nextDnaID: BigNumber;
        nextSetID: BigNumber;
        nextCloneID: BigNumber;
      }
    >;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockSet(setID: BigNumberish, overrides?: CallOverrides): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    retireAllFromSet(
      setID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    retireDnaFromSet(
      setID: BigNumberish,
      dnaID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    startNewSeries(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateBaseURI(newBaseURI: string, overrides?: CallOverrides): Promise<void>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >;

    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    "BaseURIUpdate(string)"(
      newBaseURI?: null
    ): TypedEventFilter<[string], { newBaseURI: string }>;

    BaseURIUpdate(
      newBaseURI?: null
    ): TypedEventFilter<[string], { newBaseURI: string }>;

    "DnaAddedToSet(uint64,uint64)"(
      setID?: BigNumberish | null,
      dnaID?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { setID: BigNumber; dnaID: BigNumber }
    >;

    DnaAddedToSet(
      setID?: BigNumberish | null,
      dnaID?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { setID: BigNumber; dnaID: BigNumber }
    >;

    "DnaCreated(uint64)"(
      id?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    DnaCreated(
      id?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    "DnaRetiredFromSet(uint64,uint64,uint256)"(
      setID?: BigNumberish | null,
      dnaID?: BigNumberish | null,
      numNFTs?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { setID: BigNumber; dnaID: BigNumber; numNFTs: BigNumber }
    >;

    DnaRetiredFromSet(
      setID?: BigNumberish | null,
      dnaID?: BigNumberish | null,
      numNFTs?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { setID: BigNumber; dnaID: BigNumber; numNFTs: BigNumber }
    >;

    "NewSeriesStarted(uint64)"(
      newSeriesID?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { newSeriesID: BigNumber }>;

    NewSeriesStarted(
      newSeriesID?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { newSeriesID: BigNumber }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "SetCreated(uint64,uint64)"(
      setID?: BigNumberish | null,
      series?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { setID: BigNumber; series: BigNumber }
    >;

    SetCreated(
      setID?: BigNumberish | null,
      series?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { setID: BigNumber; series: BigNumber }
    >;

    "SetLocked(uint64)"(
      setID?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { setID: BigNumber }>;

    SetLocked(
      setID?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { setID: BigNumber }>;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;

    "Withdraw(address,uint256)"(
      account?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    Withdraw(
      account?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    "YaklonDestroyed(uint256)"(
      tokenID?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { tokenID: BigNumber }>;

    YaklonDestroyed(
      tokenID?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { tokenID: BigNumber }>;

    "YaklonFed(uint256,uint256)"(
      tokenID?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { tokenID: BigNumber; amount: BigNumber }
    >;

    YaklonFed(
      tokenID?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { tokenID: BigNumber; amount: BigNumber }
    >;

    "YaklonMinted(uint256,uint64,uint64,uint256)"(
      tokenID?: BigNumberish | null,
      dnaID?: BigNumberish | null,
      setID?: BigNumberish | null,
      serialID?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        tokenID: BigNumber;
        dnaID: BigNumber;
        setID: BigNumber;
        serialID: BigNumber;
      }
    >;

    YaklonMinted(
      tokenID?: BigNumberish | null,
      dnaID?: BigNumberish | null,
      setID?: BigNumberish | null,
      serialID?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        tokenID: BigNumber;
        dnaID: BigNumber;
        setID: BigNumber;
        serialID: BigNumber;
      }
    >;
  };

  estimateGas: {
    addDnaToSet(
      setID: BigNumberish,
      dnaID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addDnasToSet(
      setID: BigNumberish,
      dnaIDs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    batchBurn(
      tokenIDs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchCloning(
      setID: BigNumberish,
      dnaID: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchTransfer(
      to: string,
      tokenIDs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cloning(
      setID: BigNumberish,
      dnaID: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createDna(
      metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createSet(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeding(
      tokenID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBaseURI(overrides?: CallOverrides): Promise<BigNumber>;

    getDnaData(
      dnaID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDnaMintedInSet(
      setID: BigNumberish,
      dnaID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDnasInSet(
      setID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNftMetadata(
      tokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSetData(
      setID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getState(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockSet(
      setID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    retireAllFromSet(
      setID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    retireDnaFromSet(
      setID: BigNumberish,
      dnaID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startNewSeries(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateBaseURI(
      newBaseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addDnaToSet(
      setID: BigNumberish,
      dnaID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addDnasToSet(
      setID: BigNumberish,
      dnaIDs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchBurn(
      tokenIDs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchCloning(
      setID: BigNumberish,
      dnaID: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchTransfer(
      to: string,
      tokenIDs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cloning(
      setID: BigNumberish,
      dnaID: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createDna(
      metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createSet(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeding(
      tokenID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBaseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDnaData(
      dnaID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDnaMintedInSet(
      setID: BigNumberish,
      dnaID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDnasInSet(
      setID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNftMetadata(
      tokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSetData(
      setID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockSet(
      setID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    retireAllFromSet(
      setID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    retireDnaFromSet(
      setID: BigNumberish,
      dnaID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startNewSeries(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateBaseURI(
      newBaseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
